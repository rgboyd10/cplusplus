
SizeCompare.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000640  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000006b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008a  00802000  00802000  000006b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000285d  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025ce  00000000  00000000  00002fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000300  00000000  00000000  0000556f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00005870  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001bab  00000000  00000000  00005894  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000743f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 a2 00 	jmp	0x144	; 0x144 <__ctors_end>
   4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
   8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
   c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  10:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  14:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  18:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  20:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  24:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  28:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  2c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  30:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  38:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  3c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  40:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  44:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  48:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  4c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  50:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  54:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  58:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  5c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  68:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  6c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  70:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  84:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  8c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  90:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  94:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  98:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  9c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  a0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  a4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  a8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  ac:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  b0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  b4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  b8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  bc:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  c0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  c4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  c8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  cc:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  d0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  d4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  d8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  dc:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  e0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  e4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  e8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  ec:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  f0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  f4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  f8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  fc:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
 100:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
 104:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
 108:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
 10c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
 110:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
 114:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
 118:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
 11c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
 120:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
 124:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
 128:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
 12c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
 130:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
 134:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
 138:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
 13c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
 140:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>

00000144 <__ctors_end>:
 144:	11 24       	eor	r1, r1
 146:	1f be       	out	0x3f, r1	; 63
 148:	cf ef       	ldi	r28, 0xFF	; 255
 14a:	cd bf       	out	0x3d, r28	; 61
 14c:	df e3       	ldi	r29, 0x3F	; 63
 14e:	de bf       	out	0x3e, r29	; 62
 150:	00 e0       	ldi	r16, 0x00	; 0
 152:	0c bf       	out	0x3c, r16	; 60

00000154 <__do_clear_bss>:
 154:	20 e2       	ldi	r18, 0x20	; 32
 156:	a0 e0       	ldi	r26, 0x00	; 0
 158:	b0 e2       	ldi	r27, 0x20	; 32
 15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
 15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
 15e:	aa 38       	cpi	r26, 0x8A	; 138
 160:	b2 07       	cpc	r27, r18
 162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
 164:	0e 94 b8 00 	call	0x170	; 0x170 <main>
 168:	0c 94 1e 03 	jmp	0x63c	; 0x63c <_exit>

0000016c <__bad_interrupt>:
 16c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000170 <main>:

#include <avr/io.h>


int main(void)
{
 170:	00 91 86 20 	lds	r16, 0x2086	; 0x802086 <_ZZ4mainE8myFloat1>
 174:	10 91 87 20 	lds	r17, 0x2087	; 0x802087 <_ZZ4mainE8myFloat1+0x1>
 178:	d0 91 88 20 	lds	r29, 0x2088	; 0x802088 <_ZZ4mainE8myFloat1+0x2>
 17c:	c0 91 89 20 	lds	r28, 0x2089	; 0x802089 <_ZZ4mainE8myFloat1+0x3>
 180:	60 90 82 20 	lds	r6, 0x2082	; 0x802082 <_ZZ4mainE8myFloat2>
 184:	70 90 83 20 	lds	r7, 0x2083	; 0x802083 <_ZZ4mainE8myFloat2+0x1>
 188:	50 90 84 20 	lds	r5, 0x2084	; 0x802084 <_ZZ4mainE8myFloat2+0x2>
 18c:	40 90 85 20 	lds	r4, 0x2085	; 0x802085 <_ZZ4mainE8myFloat2+0x3>
 190:	20 91 80 20 	lds	r18, 0x2080	; 0x802080 <_ZZ4mainE5index>
 194:	30 91 81 20 	lds	r19, 0x2081	; 0x802081 <_ZZ4mainE5index+0x1>
 198:	69 01       	movw	r12, r18
 19a:	4f ef       	ldi	r20, 0xFF	; 255
 19c:	c4 1a       	sub	r12, r20
 19e:	d4 0a       	sbc	r13, r20
 1a0:	22 0f       	add	r18, r18
 1a2:	33 1f       	adc	r19, r19
 1a4:	22 0f       	add	r18, r18
 1a6:	33 1f       	adc	r19, r19
 1a8:	c9 01       	movw	r24, r18
 1aa:	80 50       	subi	r24, 0x00	; 0
 1ac:	90 4e       	sbci	r25, 0xE0	; 224
 1ae:	7c 01       	movw	r14, r24
	static float myFloatArray[32] = {0.0};
		
    /* Replace with your application code */
    while (1) 
    {
		myFloat1 += 3.14159;
 1b0:	20 ed       	ldi	r18, 0xD0	; 208
 1b2:	3f e0       	ldi	r19, 0x0F	; 15
 1b4:	49 e4       	ldi	r20, 0x49	; 73
 1b6:	50 e4       	ldi	r21, 0x40	; 64
 1b8:	60 2f       	mov	r22, r16
 1ba:	71 2f       	mov	r23, r17
 1bc:	8d 2f       	mov	r24, r29
 1be:	9c 2f       	mov	r25, r28
 1c0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <__addsf3>
 1c4:	06 2f       	mov	r16, r22
 1c6:	17 2f       	mov	r17, r23
 1c8:	d8 2f       	mov	r29, r24
 1ca:	c9 2f       	mov	r28, r25
		myFloat2 = (myFloat1 * 2.718) - (0.1276 * myFloat2);
 1cc:	26 eb       	ldi	r18, 0xB6	; 182
 1ce:	33 ef       	ldi	r19, 0xF3	; 243
 1d0:	4d e2       	ldi	r20, 0x2D	; 45
 1d2:	50 e4       	ldi	r21, 0x40	; 64
 1d4:	0e 94 b1 02 	call	0x562	; 0x562 <__mulsf3>
 1d8:	4b 01       	movw	r8, r22
 1da:	5c 01       	movw	r10, r24
 1dc:	23 e9       	ldi	r18, 0x93	; 147
 1de:	39 ea       	ldi	r19, 0xA9	; 169
 1e0:	42 e0       	ldi	r20, 0x02	; 2
 1e2:	5e e3       	ldi	r21, 0x3E	; 62
 1e4:	66 2d       	mov	r22, r6
 1e6:	77 2d       	mov	r23, r7
 1e8:	85 2d       	mov	r24, r5
 1ea:	94 2d       	mov	r25, r4
 1ec:	0e 94 b1 02 	call	0x562	; 0x562 <__mulsf3>
 1f0:	9b 01       	movw	r18, r22
 1f2:	ac 01       	movw	r20, r24
 1f4:	c5 01       	movw	r24, r10
 1f6:	b4 01       	movw	r22, r8
 1f8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <__subsf3>
 1fc:	66 2e       	mov	r6, r22
 1fe:	77 2e       	mov	r7, r23
 200:	58 2e       	mov	r5, r24
 202:	49 2e       	mov	r4, r25
		if(myFloat2 > 31.4159)
 204:	23 ec       	ldi	r18, 0xC3	; 195
 206:	33 e5       	ldi	r19, 0x53	; 83
 208:	4b ef       	ldi	r20, 0xFB	; 251
 20a:	51 e4       	ldi	r21, 0x41	; 65
 20c:	0e 94 ac 02 	call	0x558	; 0x558 <__gesf2>
 210:	18 16       	cp	r1, r24
 212:	c4 f4       	brge	.+48     	; 0x244 <main+0xd4>
		{
			myFloatArray[index++] = myFloat1;
 214:	80 2f       	mov	r24, r16
 216:	91 2f       	mov	r25, r17
 218:	ad 2f       	mov	r26, r29
 21a:	bc 2f       	mov	r27, r28
 21c:	f7 01       	movw	r30, r14
 21e:	80 83       	st	Z, r24
 220:	91 83       	std	Z+1, r25	; 0x01
 222:	a2 83       	std	Z+2, r26	; 0x02
 224:	b3 83       	std	Z+3, r27	; 0x03
			myFloat2 = myFloat1 / myFloat2;
 226:	26 2d       	mov	r18, r6
 228:	37 2d       	mov	r19, r7
 22a:	45 2d       	mov	r20, r5
 22c:	54 2d       	mov	r21, r4
 22e:	60 2f       	mov	r22, r16
 230:	71 2f       	mov	r23, r17
 232:	8d 2f       	mov	r24, r29
 234:	9c 2f       	mov	r25, r28
 236:	0e 94 c5 01 	call	0x38a	; 0x38a <__divsf3>
 23a:	66 2e       	mov	r6, r22
 23c:	77 2e       	mov	r7, r23
 23e:	58 2e       	mov	r5, r24
 240:	49 2e       	mov	r4, r25
 242:	23 c0       	rjmp	.+70     	; 0x28a <main+0x11a>
		
		}
		else
		{
			myFloatArray[index++] = myFloat2;
 244:	86 2d       	mov	r24, r6
 246:	97 2d       	mov	r25, r7
 248:	a5 2d       	mov	r26, r5
 24a:	b4 2d       	mov	r27, r4
 24c:	f7 01       	movw	r30, r14
 24e:	80 83       	st	Z, r24
 250:	91 83       	std	Z+1, r25	; 0x01
 252:	a2 83       	std	Z+2, r26	; 0x02
 254:	b3 83       	std	Z+3, r27	; 0x03
			if(myFloatArray[index] > myFloat1)
 256:	24 81       	ldd	r18, Z+4	; 0x04
 258:	35 81       	ldd	r19, Z+5	; 0x05
 25a:	46 81       	ldd	r20, Z+6	; 0x06
 25c:	57 81       	ldd	r21, Z+7	; 0x07
 25e:	60 2f       	mov	r22, r16
 260:	71 2f       	mov	r23, r17
 262:	8d 2f       	mov	r24, r29
 264:	9c 2f       	mov	r25, r28
 266:	0e 94 c0 01 	call	0x380	; 0x380 <__cmpsf2>
 26a:	88 23       	and	r24, r24
 26c:	74 f4       	brge	.+28     	; 0x28a <main+0x11a>
			{
				myFloat1 = myFloat2 / myFloat1;
 26e:	20 2f       	mov	r18, r16
 270:	31 2f       	mov	r19, r17
 272:	4d 2f       	mov	r20, r29
 274:	5c 2f       	mov	r21, r28
 276:	66 2d       	mov	r22, r6
 278:	77 2d       	mov	r23, r7
 27a:	85 2d       	mov	r24, r5
 27c:	94 2d       	mov	r25, r4
 27e:	0e 94 c5 01 	call	0x38a	; 0x38a <__divsf3>
 282:	06 2f       	mov	r16, r22
 284:	17 2f       	mov	r17, r23
 286:	d8 2f       	mov	r29, r24
 288:	c9 2f       	mov	r28, r25
 28a:	c6 01       	movw	r24, r12
 28c:	01 96       	adiw	r24, 0x01	; 1
 28e:	f4 e0       	ldi	r31, 0x04	; 4
 290:	ef 0e       	add	r14, r31
 292:	f1 1c       	adc	r15, r1
			}
		}
		if(index >= 32)
		{
			index = 0;
 294:	20 e0       	ldi	r18, 0x00	; 0
 296:	30 e0       	ldi	r19, 0x00	; 0
			if(myFloatArray[index] > myFloat1)
			{
				myFloat1 = myFloat2 / myFloat1;
			}
		}
		if(index >= 32)
 298:	40 e2       	ldi	r20, 0x20	; 32
 29a:	c4 16       	cp	r12, r20
 29c:	d1 04       	cpc	r13, r1
 29e:	08 f0       	brcs	.+2      	; 0x2a2 <main+0x132>
 2a0:	7b cf       	rjmp	.-266    	; 0x198 <main+0x28>
 2a2:	6c 01       	movw	r12, r24
 2a4:	85 cf       	rjmp	.-246    	; 0x1b0 <main+0x40>

000002a6 <__subsf3>:
 2a6:	50 58       	subi	r21, 0x80	; 128

000002a8 <__addsf3>:
 2a8:	bb 27       	eor	r27, r27
 2aa:	aa 27       	eor	r26, r26
 2ac:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__addsf3x>
 2b0:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__fp_round>
 2b4:	0e 94 64 02 	call	0x4c8	; 0x4c8 <__fp_pscA>
 2b8:	38 f0       	brcs	.+14     	; 0x2c8 <__addsf3+0x20>
 2ba:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__fp_pscB>
 2be:	20 f0       	brcs	.+8      	; 0x2c8 <__addsf3+0x20>
 2c0:	39 f4       	brne	.+14     	; 0x2d0 <__addsf3+0x28>
 2c2:	9f 3f       	cpi	r25, 0xFF	; 255
 2c4:	19 f4       	brne	.+6      	; 0x2cc <__addsf3+0x24>
 2c6:	26 f4       	brtc	.+8      	; 0x2d0 <__addsf3+0x28>
 2c8:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__fp_nan>
 2cc:	0e f4       	brtc	.+2      	; 0x2d0 <__addsf3+0x28>
 2ce:	e0 95       	com	r30
 2d0:	e7 fb       	bst	r30, 7
 2d2:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__fp_inf>

000002d6 <__addsf3x>:
 2d6:	e9 2f       	mov	r30, r25
 2d8:	0e 94 83 02 	call	0x506	; 0x506 <__fp_split3>
 2dc:	58 f3       	brcs	.-42     	; 0x2b4 <__addsf3+0xc>
 2de:	ba 17       	cp	r27, r26
 2e0:	62 07       	cpc	r22, r18
 2e2:	73 07       	cpc	r23, r19
 2e4:	84 07       	cpc	r24, r20
 2e6:	95 07       	cpc	r25, r21
 2e8:	20 f0       	brcs	.+8      	; 0x2f2 <__addsf3x+0x1c>
 2ea:	79 f4       	brne	.+30     	; 0x30a <__addsf3x+0x34>
 2ec:	a6 f5       	brtc	.+104    	; 0x356 <__addsf3x+0x80>
 2ee:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__fp_zero>
 2f2:	0e f4       	brtc	.+2      	; 0x2f6 <__addsf3x+0x20>
 2f4:	e0 95       	com	r30
 2f6:	0b 2e       	mov	r0, r27
 2f8:	ba 2f       	mov	r27, r26
 2fa:	a0 2d       	mov	r26, r0
 2fc:	0b 01       	movw	r0, r22
 2fe:	b9 01       	movw	r22, r18
 300:	90 01       	movw	r18, r0
 302:	0c 01       	movw	r0, r24
 304:	ca 01       	movw	r24, r20
 306:	a0 01       	movw	r20, r0
 308:	11 24       	eor	r1, r1
 30a:	ff 27       	eor	r31, r31
 30c:	59 1b       	sub	r21, r25
 30e:	99 f0       	breq	.+38     	; 0x336 <__addsf3x+0x60>
 310:	59 3f       	cpi	r21, 0xF9	; 249
 312:	50 f4       	brcc	.+20     	; 0x328 <__addsf3x+0x52>
 314:	50 3e       	cpi	r21, 0xE0	; 224
 316:	68 f1       	brcs	.+90     	; 0x372 <__addsf3x+0x9c>
 318:	1a 16       	cp	r1, r26
 31a:	f0 40       	sbci	r31, 0x00	; 0
 31c:	a2 2f       	mov	r26, r18
 31e:	23 2f       	mov	r18, r19
 320:	34 2f       	mov	r19, r20
 322:	44 27       	eor	r20, r20
 324:	58 5f       	subi	r21, 0xF8	; 248
 326:	f3 cf       	rjmp	.-26     	; 0x30e <__addsf3x+0x38>
 328:	46 95       	lsr	r20
 32a:	37 95       	ror	r19
 32c:	27 95       	ror	r18
 32e:	a7 95       	ror	r26
 330:	f0 40       	sbci	r31, 0x00	; 0
 332:	53 95       	inc	r21
 334:	c9 f7       	brne	.-14     	; 0x328 <__addsf3x+0x52>
 336:	7e f4       	brtc	.+30     	; 0x356 <__addsf3x+0x80>
 338:	1f 16       	cp	r1, r31
 33a:	ba 0b       	sbc	r27, r26
 33c:	62 0b       	sbc	r22, r18
 33e:	73 0b       	sbc	r23, r19
 340:	84 0b       	sbc	r24, r20
 342:	ba f0       	brmi	.+46     	; 0x372 <__addsf3x+0x9c>
 344:	91 50       	subi	r25, 0x01	; 1
 346:	a1 f0       	breq	.+40     	; 0x370 <__addsf3x+0x9a>
 348:	ff 0f       	add	r31, r31
 34a:	bb 1f       	adc	r27, r27
 34c:	66 1f       	adc	r22, r22
 34e:	77 1f       	adc	r23, r23
 350:	88 1f       	adc	r24, r24
 352:	c2 f7       	brpl	.-16     	; 0x344 <__addsf3x+0x6e>
 354:	0e c0       	rjmp	.+28     	; 0x372 <__addsf3x+0x9c>
 356:	ba 0f       	add	r27, r26
 358:	62 1f       	adc	r22, r18
 35a:	73 1f       	adc	r23, r19
 35c:	84 1f       	adc	r24, r20
 35e:	48 f4       	brcc	.+18     	; 0x372 <__addsf3x+0x9c>
 360:	87 95       	ror	r24
 362:	77 95       	ror	r23
 364:	67 95       	ror	r22
 366:	b7 95       	ror	r27
 368:	f7 95       	ror	r31
 36a:	9e 3f       	cpi	r25, 0xFE	; 254
 36c:	08 f0       	brcs	.+2      	; 0x370 <__addsf3x+0x9a>
 36e:	b0 cf       	rjmp	.-160    	; 0x2d0 <__addsf3+0x28>
 370:	93 95       	inc	r25
 372:	88 0f       	add	r24, r24
 374:	08 f0       	brcs	.+2      	; 0x378 <__addsf3x+0xa2>
 376:	99 27       	eor	r25, r25
 378:	ee 0f       	add	r30, r30
 37a:	97 95       	ror	r25
 37c:	87 95       	ror	r24
 37e:	08 95       	ret

00000380 <__cmpsf2>:
 380:	0e 94 37 02 	call	0x46e	; 0x46e <__fp_cmp>
 384:	08 f4       	brcc	.+2      	; 0x388 <__cmpsf2+0x8>
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	08 95       	ret

0000038a <__divsf3>:
 38a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__divsf3x>
 38e:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__fp_round>
 392:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__fp_pscB>
 396:	58 f0       	brcs	.+22     	; 0x3ae <__divsf3+0x24>
 398:	0e 94 64 02 	call	0x4c8	; 0x4c8 <__fp_pscA>
 39c:	40 f0       	brcs	.+16     	; 0x3ae <__divsf3+0x24>
 39e:	29 f4       	brne	.+10     	; 0x3aa <__divsf3+0x20>
 3a0:	5f 3f       	cpi	r21, 0xFF	; 255
 3a2:	29 f0       	breq	.+10     	; 0x3ae <__divsf3+0x24>
 3a4:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__fp_inf>
 3a8:	51 11       	cpse	r21, r1
 3aa:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__fp_szero>
 3ae:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__fp_nan>

000003b2 <__divsf3x>:
 3b2:	0e 94 83 02 	call	0x506	; 0x506 <__fp_split3>
 3b6:	68 f3       	brcs	.-38     	; 0x392 <__divsf3+0x8>

000003b8 <__divsf3_pse>:
 3b8:	99 23       	and	r25, r25
 3ba:	b1 f3       	breq	.-20     	; 0x3a8 <__divsf3+0x1e>
 3bc:	55 23       	and	r21, r21
 3be:	91 f3       	breq	.-28     	; 0x3a4 <__divsf3+0x1a>
 3c0:	95 1b       	sub	r25, r21
 3c2:	55 0b       	sbc	r21, r21
 3c4:	bb 27       	eor	r27, r27
 3c6:	aa 27       	eor	r26, r26
 3c8:	62 17       	cp	r22, r18
 3ca:	73 07       	cpc	r23, r19
 3cc:	84 07       	cpc	r24, r20
 3ce:	38 f0       	brcs	.+14     	; 0x3de <__divsf3_pse+0x26>
 3d0:	9f 5f       	subi	r25, 0xFF	; 255
 3d2:	5f 4f       	sbci	r21, 0xFF	; 255
 3d4:	22 0f       	add	r18, r18
 3d6:	33 1f       	adc	r19, r19
 3d8:	44 1f       	adc	r20, r20
 3da:	aa 1f       	adc	r26, r26
 3dc:	a9 f3       	breq	.-22     	; 0x3c8 <__divsf3_pse+0x10>
 3de:	35 d0       	rcall	.+106    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 3e0:	0e 2e       	mov	r0, r30
 3e2:	3a f0       	brmi	.+14     	; 0x3f2 <__divsf3_pse+0x3a>
 3e4:	e0 e8       	ldi	r30, 0x80	; 128
 3e6:	32 d0       	rcall	.+100    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 3e8:	91 50       	subi	r25, 0x01	; 1
 3ea:	50 40       	sbci	r21, 0x00	; 0
 3ec:	e6 95       	lsr	r30
 3ee:	00 1c       	adc	r0, r0
 3f0:	ca f7       	brpl	.-14     	; 0x3e4 <__divsf3_pse+0x2c>
 3f2:	2b d0       	rcall	.+86     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 3f4:	fe 2f       	mov	r31, r30
 3f6:	29 d0       	rcall	.+82     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 3f8:	66 0f       	add	r22, r22
 3fa:	77 1f       	adc	r23, r23
 3fc:	88 1f       	adc	r24, r24
 3fe:	bb 1f       	adc	r27, r27
 400:	26 17       	cp	r18, r22
 402:	37 07       	cpc	r19, r23
 404:	48 07       	cpc	r20, r24
 406:	ab 07       	cpc	r26, r27
 408:	b0 e8       	ldi	r27, 0x80	; 128
 40a:	09 f0       	breq	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40c:	bb 0b       	sbc	r27, r27
 40e:	80 2d       	mov	r24, r0
 410:	bf 01       	movw	r22, r30
 412:	ff 27       	eor	r31, r31
 414:	93 58       	subi	r25, 0x83	; 131
 416:	5f 4f       	sbci	r21, 0xFF	; 255
 418:	3a f0       	brmi	.+14     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 41a:	9e 3f       	cpi	r25, 0xFE	; 254
 41c:	51 05       	cpc	r21, r1
 41e:	78 f0       	brcs	.+30     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 420:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__fp_inf>
 424:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__fp_szero>
 428:	5f 3f       	cpi	r21, 0xFF	; 255
 42a:	e4 f3       	brlt	.-8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 42c:	98 3e       	cpi	r25, 0xE8	; 232
 42e:	d4 f3       	brlt	.-12     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 430:	86 95       	lsr	r24
 432:	77 95       	ror	r23
 434:	67 95       	ror	r22
 436:	b7 95       	ror	r27
 438:	f7 95       	ror	r31
 43a:	9f 5f       	subi	r25, 0xFF	; 255
 43c:	c9 f7       	brne	.-14     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 43e:	88 0f       	add	r24, r24
 440:	91 1d       	adc	r25, r1
 442:	96 95       	lsr	r25
 444:	87 95       	ror	r24
 446:	97 f9       	bld	r25, 7
 448:	08 95       	ret
 44a:	e1 e0       	ldi	r30, 0x01	; 1
 44c:	66 0f       	add	r22, r22
 44e:	77 1f       	adc	r23, r23
 450:	88 1f       	adc	r24, r24
 452:	bb 1f       	adc	r27, r27
 454:	62 17       	cp	r22, r18
 456:	73 07       	cpc	r23, r19
 458:	84 07       	cpc	r24, r20
 45a:	ba 07       	cpc	r27, r26
 45c:	20 f0       	brcs	.+8      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 45e:	62 1b       	sub	r22, r18
 460:	73 0b       	sbc	r23, r19
 462:	84 0b       	sbc	r24, r20
 464:	ba 0b       	sbc	r27, r26
 466:	ee 1f       	adc	r30, r30
 468:	88 f7       	brcc	.-30     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 46a:	e0 95       	com	r30
 46c:	08 95       	ret

0000046e <__fp_cmp>:
 46e:	99 0f       	add	r25, r25
 470:	00 08       	sbc	r0, r0
 472:	55 0f       	add	r21, r21
 474:	aa 0b       	sbc	r26, r26
 476:	e0 e8       	ldi	r30, 0x80	; 128
 478:	fe ef       	ldi	r31, 0xFE	; 254
 47a:	16 16       	cp	r1, r22
 47c:	17 06       	cpc	r1, r23
 47e:	e8 07       	cpc	r30, r24
 480:	f9 07       	cpc	r31, r25
 482:	c0 f0       	brcs	.+48     	; 0x4b4 <__fp_cmp+0x46>
 484:	12 16       	cp	r1, r18
 486:	13 06       	cpc	r1, r19
 488:	e4 07       	cpc	r30, r20
 48a:	f5 07       	cpc	r31, r21
 48c:	98 f0       	brcs	.+38     	; 0x4b4 <__fp_cmp+0x46>
 48e:	62 1b       	sub	r22, r18
 490:	73 0b       	sbc	r23, r19
 492:	84 0b       	sbc	r24, r20
 494:	95 0b       	sbc	r25, r21
 496:	39 f4       	brne	.+14     	; 0x4a6 <__fp_cmp+0x38>
 498:	0a 26       	eor	r0, r26
 49a:	61 f0       	breq	.+24     	; 0x4b4 <__fp_cmp+0x46>
 49c:	23 2b       	or	r18, r19
 49e:	24 2b       	or	r18, r20
 4a0:	25 2b       	or	r18, r21
 4a2:	21 f4       	brne	.+8      	; 0x4ac <__fp_cmp+0x3e>
 4a4:	08 95       	ret
 4a6:	0a 26       	eor	r0, r26
 4a8:	09 f4       	brne	.+2      	; 0x4ac <__fp_cmp+0x3e>
 4aa:	a1 40       	sbci	r26, 0x01	; 1
 4ac:	a6 95       	lsr	r26
 4ae:	8f ef       	ldi	r24, 0xFF	; 255
 4b0:	81 1d       	adc	r24, r1
 4b2:	81 1d       	adc	r24, r1
 4b4:	08 95       	ret

000004b6 <__fp_inf>:
 4b6:	97 f9       	bld	r25, 7
 4b8:	9f 67       	ori	r25, 0x7F	; 127
 4ba:	80 e8       	ldi	r24, 0x80	; 128
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	08 95       	ret

000004c2 <__fp_nan>:
 4c2:	9f ef       	ldi	r25, 0xFF	; 255
 4c4:	80 ec       	ldi	r24, 0xC0	; 192
 4c6:	08 95       	ret

000004c8 <__fp_pscA>:
 4c8:	00 24       	eor	r0, r0
 4ca:	0a 94       	dec	r0
 4cc:	16 16       	cp	r1, r22
 4ce:	17 06       	cpc	r1, r23
 4d0:	18 06       	cpc	r1, r24
 4d2:	09 06       	cpc	r0, r25
 4d4:	08 95       	ret

000004d6 <__fp_pscB>:
 4d6:	00 24       	eor	r0, r0
 4d8:	0a 94       	dec	r0
 4da:	12 16       	cp	r1, r18
 4dc:	13 06       	cpc	r1, r19
 4de:	14 06       	cpc	r1, r20
 4e0:	05 06       	cpc	r0, r21
 4e2:	08 95       	ret

000004e4 <__fp_round>:
 4e4:	09 2e       	mov	r0, r25
 4e6:	03 94       	inc	r0
 4e8:	00 0c       	add	r0, r0
 4ea:	11 f4       	brne	.+4      	; 0x4f0 <__fp_round+0xc>
 4ec:	88 23       	and	r24, r24
 4ee:	52 f0       	brmi	.+20     	; 0x504 <__fp_round+0x20>
 4f0:	bb 0f       	add	r27, r27
 4f2:	40 f4       	brcc	.+16     	; 0x504 <__fp_round+0x20>
 4f4:	bf 2b       	or	r27, r31
 4f6:	11 f4       	brne	.+4      	; 0x4fc <__fp_round+0x18>
 4f8:	60 ff       	sbrs	r22, 0
 4fa:	04 c0       	rjmp	.+8      	; 0x504 <__fp_round+0x20>
 4fc:	6f 5f       	subi	r22, 0xFF	; 255
 4fe:	7f 4f       	sbci	r23, 0xFF	; 255
 500:	8f 4f       	sbci	r24, 0xFF	; 255
 502:	9f 4f       	sbci	r25, 0xFF	; 255
 504:	08 95       	ret

00000506 <__fp_split3>:
 506:	57 fd       	sbrc	r21, 7
 508:	90 58       	subi	r25, 0x80	; 128
 50a:	44 0f       	add	r20, r20
 50c:	55 1f       	adc	r21, r21
 50e:	59 f0       	breq	.+22     	; 0x526 <__fp_splitA+0x10>
 510:	5f 3f       	cpi	r21, 0xFF	; 255
 512:	71 f0       	breq	.+28     	; 0x530 <__fp_splitA+0x1a>
 514:	47 95       	ror	r20

00000516 <__fp_splitA>:
 516:	88 0f       	add	r24, r24
 518:	97 fb       	bst	r25, 7
 51a:	99 1f       	adc	r25, r25
 51c:	61 f0       	breq	.+24     	; 0x536 <__fp_splitA+0x20>
 51e:	9f 3f       	cpi	r25, 0xFF	; 255
 520:	79 f0       	breq	.+30     	; 0x540 <__fp_splitA+0x2a>
 522:	87 95       	ror	r24
 524:	08 95       	ret
 526:	12 16       	cp	r1, r18
 528:	13 06       	cpc	r1, r19
 52a:	14 06       	cpc	r1, r20
 52c:	55 1f       	adc	r21, r21
 52e:	f2 cf       	rjmp	.-28     	; 0x514 <__fp_split3+0xe>
 530:	46 95       	lsr	r20
 532:	f1 df       	rcall	.-30     	; 0x516 <__fp_splitA>
 534:	08 c0       	rjmp	.+16     	; 0x546 <__fp_splitA+0x30>
 536:	16 16       	cp	r1, r22
 538:	17 06       	cpc	r1, r23
 53a:	18 06       	cpc	r1, r24
 53c:	99 1f       	adc	r25, r25
 53e:	f1 cf       	rjmp	.-30     	; 0x522 <__fp_splitA+0xc>
 540:	86 95       	lsr	r24
 542:	71 05       	cpc	r23, r1
 544:	61 05       	cpc	r22, r1
 546:	08 94       	sec
 548:	08 95       	ret

0000054a <__fp_zero>:
 54a:	e8 94       	clt

0000054c <__fp_szero>:
 54c:	bb 27       	eor	r27, r27
 54e:	66 27       	eor	r22, r22
 550:	77 27       	eor	r23, r23
 552:	cb 01       	movw	r24, r22
 554:	97 f9       	bld	r25, 7
 556:	08 95       	ret

00000558 <__gesf2>:
 558:	0e 94 37 02 	call	0x46e	; 0x46e <__fp_cmp>
 55c:	08 f4       	brcc	.+2      	; 0x560 <__gesf2+0x8>
 55e:	8f ef       	ldi	r24, 0xFF	; 255
 560:	08 95       	ret

00000562 <__mulsf3>:
 562:	0e 94 c4 02 	call	0x588	; 0x588 <__mulsf3x>
 566:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__fp_round>
 56a:	0e 94 64 02 	call	0x4c8	; 0x4c8 <__fp_pscA>
 56e:	38 f0       	brcs	.+14     	; 0x57e <__mulsf3+0x1c>
 570:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__fp_pscB>
 574:	20 f0       	brcs	.+8      	; 0x57e <__mulsf3+0x1c>
 576:	95 23       	and	r25, r21
 578:	11 f0       	breq	.+4      	; 0x57e <__mulsf3+0x1c>
 57a:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__fp_inf>
 57e:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__fp_nan>
 582:	11 24       	eor	r1, r1
 584:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__fp_szero>

00000588 <__mulsf3x>:
 588:	0e 94 83 02 	call	0x506	; 0x506 <__fp_split3>
 58c:	70 f3       	brcs	.-36     	; 0x56a <__mulsf3+0x8>

0000058e <__mulsf3_pse>:
 58e:	95 9f       	mul	r25, r21
 590:	c1 f3       	breq	.-16     	; 0x582 <__mulsf3+0x20>
 592:	95 0f       	add	r25, r21
 594:	50 e0       	ldi	r21, 0x00	; 0
 596:	55 1f       	adc	r21, r21
 598:	62 9f       	mul	r22, r18
 59a:	f0 01       	movw	r30, r0
 59c:	72 9f       	mul	r23, r18
 59e:	bb 27       	eor	r27, r27
 5a0:	f0 0d       	add	r31, r0
 5a2:	b1 1d       	adc	r27, r1
 5a4:	63 9f       	mul	r22, r19
 5a6:	aa 27       	eor	r26, r26
 5a8:	f0 0d       	add	r31, r0
 5aa:	b1 1d       	adc	r27, r1
 5ac:	aa 1f       	adc	r26, r26
 5ae:	64 9f       	mul	r22, r20
 5b0:	66 27       	eor	r22, r22
 5b2:	b0 0d       	add	r27, r0
 5b4:	a1 1d       	adc	r26, r1
 5b6:	66 1f       	adc	r22, r22
 5b8:	82 9f       	mul	r24, r18
 5ba:	22 27       	eor	r18, r18
 5bc:	b0 0d       	add	r27, r0
 5be:	a1 1d       	adc	r26, r1
 5c0:	62 1f       	adc	r22, r18
 5c2:	73 9f       	mul	r23, r19
 5c4:	b0 0d       	add	r27, r0
 5c6:	a1 1d       	adc	r26, r1
 5c8:	62 1f       	adc	r22, r18
 5ca:	83 9f       	mul	r24, r19
 5cc:	a0 0d       	add	r26, r0
 5ce:	61 1d       	adc	r22, r1
 5d0:	22 1f       	adc	r18, r18
 5d2:	74 9f       	mul	r23, r20
 5d4:	33 27       	eor	r19, r19
 5d6:	a0 0d       	add	r26, r0
 5d8:	61 1d       	adc	r22, r1
 5da:	23 1f       	adc	r18, r19
 5dc:	84 9f       	mul	r24, r20
 5de:	60 0d       	add	r22, r0
 5e0:	21 1d       	adc	r18, r1
 5e2:	82 2f       	mov	r24, r18
 5e4:	76 2f       	mov	r23, r22
 5e6:	6a 2f       	mov	r22, r26
 5e8:	11 24       	eor	r1, r1
 5ea:	9f 57       	subi	r25, 0x7F	; 127
 5ec:	50 40       	sbci	r21, 0x00	; 0
 5ee:	9a f0       	brmi	.+38     	; 0x616 <__mulsf3_pse+0x88>
 5f0:	f1 f0       	breq	.+60     	; 0x62e <__mulsf3_pse+0xa0>
 5f2:	88 23       	and	r24, r24
 5f4:	4a f0       	brmi	.+18     	; 0x608 <__mulsf3_pse+0x7a>
 5f6:	ee 0f       	add	r30, r30
 5f8:	ff 1f       	adc	r31, r31
 5fa:	bb 1f       	adc	r27, r27
 5fc:	66 1f       	adc	r22, r22
 5fe:	77 1f       	adc	r23, r23
 600:	88 1f       	adc	r24, r24
 602:	91 50       	subi	r25, 0x01	; 1
 604:	50 40       	sbci	r21, 0x00	; 0
 606:	a9 f7       	brne	.-22     	; 0x5f2 <__mulsf3_pse+0x64>
 608:	9e 3f       	cpi	r25, 0xFE	; 254
 60a:	51 05       	cpc	r21, r1
 60c:	80 f0       	brcs	.+32     	; 0x62e <__mulsf3_pse+0xa0>
 60e:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__fp_inf>
 612:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__fp_szero>
 616:	5f 3f       	cpi	r21, 0xFF	; 255
 618:	e4 f3       	brlt	.-8      	; 0x612 <__mulsf3_pse+0x84>
 61a:	98 3e       	cpi	r25, 0xE8	; 232
 61c:	d4 f3       	brlt	.-12     	; 0x612 <__mulsf3_pse+0x84>
 61e:	86 95       	lsr	r24
 620:	77 95       	ror	r23
 622:	67 95       	ror	r22
 624:	b7 95       	ror	r27
 626:	f7 95       	ror	r31
 628:	e7 95       	ror	r30
 62a:	9f 5f       	subi	r25, 0xFF	; 255
 62c:	c1 f7       	brne	.-16     	; 0x61e <__mulsf3_pse+0x90>
 62e:	fe 2b       	or	r31, r30
 630:	88 0f       	add	r24, r24
 632:	91 1d       	adc	r25, r1
 634:	96 95       	lsr	r25
 636:	87 95       	ror	r24
 638:	97 f9       	bld	r25, 7
 63a:	08 95       	ret

0000063c <_exit>:
 63c:	f8 94       	cli

0000063e <__stop_program>:
 63e:	ff cf       	rjmp	.-2      	; 0x63e <__stop_program>
