;/*******************************************************
;USARTs initialization created by the
;CodeWizardAVR V3.32 Automatic Program Generator
;© Copyright 1998-2017 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;*******************************************************/
;
;// I/O Registers definitions
;#include <xmega128b1.h>
;
;// USARTs initialization functions
;#include "usarts_init.h"
;
;// USARTC0 initialization
;void usartc0_init(void)
; 0005 0012 {

	.CSEG
;PCODE: $00000000 VOL: 0
;PCODE: $00000001 VOL: 0
; 0005 0013 // Note: The correct PORTC direction for the RxD, TxD and XCK signals
; 0005 0014 // is configured in the ports_init function.
; 0005 0015 
; 0005 0016 // Transmitter is enabled
; 0005 0017 // Set TxD=1
; 0005 0018 PORTC.OUTSET=0x08;
;PCODE: $00000002 VOL: 0
;PCODE: $00000003 VOL: 1
; 0005 0019 
; 0005 001A // Communication mode: Asynchronous USART
; 0005 001B // Data bits: 8
; 0005 001C // Stop bits: 1
; 0005 001D // Parity: Disabled
; 0005 001E USARTC0.CTRLC=USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
;PCODE: $00000004 VOL: 0
;PCODE: $00000005 VOL: 1
; 0005 001F 
; 0005 0020 // Receive complete interrupt: Disabled
; 0005 0021 // Transmit complete interrupt: Disabled
; 0005 0022 // Data register empty interrupt: Disabled
; 0005 0023 USARTC0.CTRLA=(USARTC0.CTRLA & (~(USART_RXCINTLVL_gm | USART_TXCINTLVL_gm | USART_DREINTLVL_gm))) |
; 0005 0024 	USART_RXCINTLVL_OFF_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
;PCODE: $00000006 VOL: 1
;PCODE: $00000007 VOL: 0
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 1
; 0005 0025 
; 0005 0026 // Required Baud rate: 600
; 0005 0027 // Real Baud Rate: 600.1 (x1 Mode), Error: 0.0 %
; 0005 0028 USARTC0.BAUDCTRLA=0xF5;
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 1
; 0005 0029 USARTC0.BAUDCTRLB=((0x0C << USART_BSCALE_gp) & USART_BSCALE_gm) | 0x0C;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 1
; 0005 002A 
; 0005 002B // Receiver: Off
; 0005 002C // Transmitter: On
; 0005 002D // Double transmission speed mode: Off
; 0005 002E // Multi-processor communication mode: Off
; 0005 002F USARTC0.CTRLB=(USARTC0.CTRLB & (~(USART_RXEN_bm | USART_TXEN_bm | USART_CLK2X_bm | USART_MPCM_bm | USART_TXB8_bm))) |
; 0005 0030 	USART_TXEN_bm;
;PCODE: $00000010 VOL: 1
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 1
; 0005 0031 }
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;
;// Write a character to the USARTC0 Transmitter
;#pragma used+
;void putchar_usartc0(char c)
; 0005 0036 {
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0005 0037 while ((USARTC0.STATUS & USART_DREIF_bm) == 0);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;	c -> R17
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 1
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0005 0038 USARTC0.DATA=c;
;PCODE: $00000020 VOL: 1
;PCODE: $00000021 VOL: 0
; 0005 0039 }
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;#pragma used-
;
