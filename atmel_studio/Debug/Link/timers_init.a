;/*******************************************************
;Timers/Counters initialization created by the
;CodeWizardAVR V3.32 Automatic Program Generator
;© Copyright 1998-2017 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;*******************************************************/
;
;// I/O Registers definitions
;#include <xmega128b1.h>
;
;// Disable a Timer/Counter type TC0
;void tc0_disable(TC0_t *ptc)
; 0004 000F {

	.CSEG
;PCODE: $00000000 VOL: 0
;PCODE: $00000001 VOL: 0
; 0004 0010 // Timer/Counter off
; 0004 0011 ptc->CTRLA=TC_CLKSEL_OFF_gc;
;PCODE: $00000002 VOL: 0
;PCODE: $00000003 VOL: 0
;PCODE: $00000004 VOL: 0
;	*ptc -> R16,R17
;PCODE: $00000005 VOL: 0
;PCODE: $00000006 VOL: 0
;PCODE: $00000007 VOL: 0
; 0004 0012 // Issue a reset command
; 0004 0013 ptc->CTRLFSET=TC_CMD_RESET_gc;
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0004 0014 }
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;
;// Disable a Timer/Counter type TC1
;void tc1_disable(TC1_t *ptc)
; 0004 0018 {
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0004 0019 // Timer/Counter off
; 0004 001A ptc->CTRLA=TC_CLKSEL_OFF_gc;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;	*ptc -> R16,R17
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0004 001B // Issue a reset command
; 0004 001C ptc->CTRLFSET=TC_CMD_RESET_gc;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0004 001D }
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;
;// Timer/Counter TCC0 initialization
;void tcc0_init(void)
; 0004 0021 {
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0004 0022 unsigned char s;
; 0004 0023 unsigned char n;
; 0004 0024 
; 0004 0025 // Note: The correct PORTC direction for the Compare Channels
; 0004 0026 // outputs is configured in the ports_init function.
; 0004 0027 
; 0004 0028 // Save interrupts enabled/disabled state
; 0004 0029 s=SREG;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;	s -> R17
;	n -> R16
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0004 002A // Disable interrupts
; 0004 002B #asm("cli")
;PCODE: $00000024 VOL: 0
; 0004 002C 
; 0004 002D // Disable and reset the timer/counter just to be sure
; 0004 002E tc0_disable(&TCC0);
;PCODE: $00000025 VOL: 1
;PCODE: $00000026 VOL: 0
; 0004 002F // Clock source: ClkPer/1
; 0004 0030 TCC0.CTRLA=TC_CLKSEL_DIV1_gc;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 1
; 0004 0031 // Mode: Normal Operation, Overflow Int./Event on TOP
; 0004 0032 // Compare/Capture on channel A: Off
; 0004 0033 // Compare/Capture on channel B: Off
; 0004 0034 // Compare/Capture on channel C: Off
; 0004 0035 // Compare/Capture on channel D: Off
; 0004 0036 TCC0.CTRLB=(0<<TC0_CCDEN_bp) | (0<<TC0_CCCEN_bp) | (0<<TC0_CCBEN_bp) | (0<<TC0_CCAEN_bp) |
; 0004 0037 	TC_WGMODE_NORMAL_gc;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 1
; 0004 0038 // Capture event source: None
; 0004 0039 // Capture event action: None
; 0004 003A TCC0.CTRLD=TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 1
; 0004 003B 
; 0004 003C // Set Timer/Counter in Normal mode
; 0004 003D TCC0.CTRLE=TC_BYTEM_NORMAL_gc;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 1
; 0004 003E 
; 0004 003F // Overflow interrupt: High Level
; 0004 0040 // Error interrupt: Disabled
; 0004 0041 TCC0.INTCTRLA=TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_HI_gc;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 1
; 0004 0042 
; 0004 0043 // Compare/Capture channel A interrupt: Disabled
; 0004 0044 // Compare/Capture channel B interrupt: Disabled
; 0004 0045 // Compare/Capture channel C interrupt: Disabled
; 0004 0046 // Compare/Capture channel D interrupt: Disabled
; 0004 0047 TCC0.INTCTRLB=TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 1
; 0004 0048 
; 0004 0049 // High resolution extension: Off
; 0004 004A HIRESC.CTRLA&= ~HIRES_HREN0_bm;
;PCODE: $00000033 VOL: 1
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 1
; 0004 004B 
; 0004 004C // Advanced Waveform Extension initialization
; 0004 004D // Optimize for speed
; 0004 004E #pragma optsize-
; 0004 004F // Disable locking the AWEX configuration registers just to be sure
; 0004 0050 n=MCU.AWEXLOCK & (~MCU_AWEXCLOCK_bm);
;PCODE: $00000036 VOL: 1
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0004 0051 CCP=CCP_IOREG_gc;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0004 0052 MCU.AWEXLOCK=n;
;PCODE: $0000003B VOL: 1
;PCODE: $0000003C VOL: 0
; 0004 0053 // Restore optimization for size if needed
; 0004 0054 #pragma optsize_default
; 0004 0055 
; 0004 0056 // Pattern generation: Off
; 0004 0057 // Dead time insertion: Off
; 0004 0058 AWEXC.CTRL=(0<<AWEX_PGM_bp) | (0<<AWEX_CWCM_bp) | (0<<AWEX_DTICCDEN_bp) | (0<<AWEX_DTICCCEN_bp) |
; 0004 0059 	(0<<AWEX_DTICCBEN_bp) | (0<<AWEX_DTICCAEN_bp);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 1
; 0004 005A 
; 0004 005B // Fault protection initialization
; 0004 005C // Fault detection on OCD Break detection: On
; 0004 005D // Fault detection restart mode: Latched Mode
; 0004 005E // Fault detection action: None (Fault protection disabled)
; 0004 005F AWEXC.FDCTRL=(AWEXC.FDCTRL & (~(AWEX_FDDBD_bm | AWEX_FDMODE_bm | AWEX_FDACT_gm))) |
; 0004 0060 	(0<<AWEX_FDDBD_bp) | (0<<AWEX_FDMODE_bp) | AWEX_FDACT_NONE_gc;
;PCODE: $0000003F VOL: 1
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 1
; 0004 0061 // Fault detect events:
; 0004 0062 // Event channel 0: Off
; 0004 0063 // Event channel 1: Off
; 0004 0064 // Event channel 2: Off
; 0004 0065 // Event channel 3: Off
; 0004 0066 // Event channel 4: Off
; 0004 0067 // Event channel 5: Off
; 0004 0068 // Event channel 6: Off
; 0004 0069 // Event channel 7: Off
; 0004 006A AWEXC.FDEMASK=0b00000000;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 1
; 0004 006B // Make sure the fault detect flag is cleared
; 0004 006C AWEXC.STATUS|=AWEXC.STATUS & AWEX_FDF_bm;
;PCODE: $00000047 VOL: 1
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 1
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0004 006D 
; 0004 006E // Clear the interrupt flags
; 0004 006F TCC0.INTFLAGS=TCC0.INTFLAGS;
;PCODE: $0000004F VOL: 1
;PCODE: $00000050 VOL: 1
; 0004 0070 // Set Counter register
; 0004 0071 TCC0.CNT=0x0000;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 1
; 0004 0072 // Set Period register
; 0004 0073 TCC0.PER=0x07CF;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 1
; 0004 0074 // Set channel A Compare/Capture register
; 0004 0075 TCC0.CCA=0x0000;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 1
; 0004 0076 // Set channel B Compare/Capture register
; 0004 0077 TCC0.CCB=0x0000;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 1
; 0004 0078 // Set channel C Compare/Capture register
; 0004 0079 TCC0.CCC=0x0000;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 1
; 0004 007A // Set channel D Compare/Capture register
; 0004 007B TCC0.CCD=0x0000;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 1
; 0004 007C 
; 0004 007D // Restore interrupts enabled/disabled state
; 0004 007E SREG=s;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0004 007F }
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;
;// Timer/Counter TCC0 Overflow/Underflow interrupt service routine
;interrupt [TCC0_OVF_vect] void tcc0_overflow_isr(void)
; 0004 0083 {
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0004 0084 // Write your code here
; 0004 0085 
; 0004 0086 }
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;
;// Timer/Counter TCC1 initialization
;void tcc1_init(void)
; 0004 008A {
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0004 008B unsigned char s;
; 0004 008C 
; 0004 008D // Note: The correct PORTC direction for the Compare Channels
; 0004 008E // outputs is configured in the ports_init function.
; 0004 008F 
; 0004 0090 // Save interrupts enabled/disabled state
; 0004 0091 s=SREG;
;PCODE: $00000069 VOL: 0
;	s -> R17
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0004 0092 // Disable interrupts
; 0004 0093 #asm("cli")
;PCODE: $0000006C VOL: 0
; 0004 0094 
; 0004 0095 // Disable and reset the timer/counter just to be sure
; 0004 0096 tc1_disable(&TCC1);
;PCODE: $0000006D VOL: 1
;PCODE: $0000006E VOL: 0
; 0004 0097 // Clock source: ClkPer/256
; 0004 0098 TCC1.CTRLA=TC_CLKSEL_DIV256_gc;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 1
; 0004 0099 // Mode: Normal Operation, Overflow Int./Event on TOP
; 0004 009A // Compare/Capture on channel A: On
; 0004 009B // Compare/Capture on channel B: Off
; 0004 009C TCC1.CTRLB=(0<<TC1_CCBEN_bp) | (1<<TC1_CCAEN_bp) |
; 0004 009D 	TC_WGMODE_NORMAL_gc;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 1
; 0004 009E // Capture event source: Event Channel 0
; 0004 009F // Capture event action: Input Capture
; 0004 00A0 TCC1.CTRLD=TC_EVACT_CAPT_gc | TC_EVSEL_CH0_gc;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 1
; 0004 00A1 
; 0004 00A2 // Set Timer/Counter in Normal mode
; 0004 00A3 TCC1.CTRLE=TC_BYTEM_NORMAL_gc;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 1
; 0004 00A4 
; 0004 00A5 // Overflow interrupt: Disabled
; 0004 00A6 // Error interrupt: Disabled
; 0004 00A7 TCC1.INTCTRLA=TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_OFF_gc;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 1
; 0004 00A8 
; 0004 00A9 // Compare/Capture channel A interrupt: High Level
; 0004 00AA // Compare/Capture channel B interrupt: Disabled
; 0004 00AB TCC1.INTCTRLB=TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_HI_gc;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 1
; 0004 00AC 
; 0004 00AD // High resolution extension: Off
; 0004 00AE HIRESC.CTRLA&= ~HIRES_HREN1_bm;
;PCODE: $0000007B VOL: 1
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 1
; 0004 00AF 
; 0004 00B0 // Clear the interrupt flags
; 0004 00B1 TCC1.INTFLAGS=TCC1.INTFLAGS;
;PCODE: $0000007E VOL: 1
;PCODE: $0000007F VOL: 1
; 0004 00B2 // Set Counter register
; 0004 00B3 TCC1.CNT=0x0000;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 1
; 0004 00B4 // Set Period register
; 0004 00B5 TCC1.PER=0xFFFF;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 1
; 0004 00B6 // Set channel A Compare/Capture register
; 0004 00B7 TCC1.CCA=0x0000;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 1
; 0004 00B8 // Set channel B Compare/Capture register
; 0004 00B9 TCC1.CCB=0x0000;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 1
; 0004 00BA 
; 0004 00BB // Restore interrupts enabled/disabled state
; 0004 00BC SREG=s;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0004 00BD }
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;
;// Timer/Counter TCC1 Compare/Capture A interrupt service routine
;interrupt [TCC1_CCA_vect] void tcc1_compare_capture_a_isr(void)
; 0004 00C1 {
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0004 00C2 // Ensure that the Compare/Capture A interrupt flag is cleared
; 0004 00C3 if (TCC1.INTFLAGS & TC1_CCAIF_bm) TCC1.INTFLAGS|=TC1_CCAIF_bm;
;PCODE: $0000008F VOL: 1
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 1
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 1
; 0004 00C4 // Write your code here
; 0004 00C5 #asm("nop")
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0004 00C6 }
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;
