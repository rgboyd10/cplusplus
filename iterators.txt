Iterators

Pre-allocating Vectors is No Fun

vector<int> v1(10);

fill(begin(v1), end(v1), 1);

iota(begin(v1), end(v1), 1);

What if you don't know what the size should be?
What if there is no default constructor?
What if the default constructor is expensive?

----

Use a Different Iterator
-back_inserter
-front_inserter

----

Changing Values with Iterators
-Different iterators can change the behavior of the algorithm.

begin(v)
front_inserter(v)

----

Use Them with (Almost Any Algorithm)
-fill_n
-generate_n
-transform - as the target
-copy, copy_if
-unique_copy
-reverse_copy

----

Reverse
-rbegin is the last element
-end is past the last element

----

Iterator Arithmetic
-auto is your friend
++,--
+=, -=
+(int), -(int or it)

----

Iterators to const Elements
-Not all collections can hold const objects
-Iterators don't get you around const
-cbegin() returns const_iterator
-end() and cend() reverse too
-Express intent, beyond const correctness

----

Summary
-Use the functions you already know with different iterators
-Inserters
	-Saves preallocating

-Reverse
-Const
-Iterator arithmetic is safe
	  -Sometimes convenient

-Having many kinds of iterators means less algorithms
	-No find / reversefind / constfind
	-Less to learn and remember

