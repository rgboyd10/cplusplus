CLASS FEATURES
-In-class initializers for non-static data members
-Delegating constructors
-Inheriting constructors
-Default methods
-Deleted methods
-Override and final specifiers
-Extended friend declarations
-Nested class access rights
---------------------------

In-class initializers for non-static data members
class JetPlane
{
	public:
		string _mode1 = "Unknown";
		vector<Engine> _engines{Engine(), Engine()};
};

class JetPlane
{
	vector<Engine> _engines;
	string _manufacturer;
	string _model;
    public:
	JetPlane() :
	_engines(2), _manufacturer("Unknown"), _model("Unknown")
	{}

	JetPlan(const strng& manufacturer) :
	_engines(2), _manufacturer(manufacturer), _model("Unknown")
	{}
};

changes to

Class JetPlane
{
	vector<Engine> _engines {Engine(), Engine()};
	string _manufacturer = "Unknown";
	string _model = "Uknown";
    public:
    JetPlane()
    {}

    JetPlan(const string& manufacturer) : _manufacturer(manufacturer)
    {}
}; 
////////////
Class JetPlane
{
	string _manufacturer = "Unknown";
	string _model = "Uknown";
	vector<Engine> _engines {get_engine_count(_manufacturer, _mode1)};

	static size_t get_engine_count(const string& manufacturer, const string& mode1);
};

struct Counter
{
	int_count = 1;
};

Counter c = {10};
//compiler will complain about this

Class JetPlane
{
	public:
		vector<Engine> _engines{2}l
		JetPlan() : _engines(4)
		{}
};
 // number of engines will be 4 and not 2

--------------------------------
INHERITING CONSTRUCTORS

class Plane
{
	vector<Engine _engines;
	string _manufacturer;
	string _mode1;

	public:
		Plane(const string& manufacturer);
		Plane(const PlaneID& tail_number);
};

class JetPlane : public Plane
{
	public:
		//boring
		JetPlane(const string& manufacturer) : Plane(manufacturer)
		{}

		//boring
		JetPlan(const PlaneID& tail_number) : Plane(tail_number)
		{}
};

CHANGES TO

class JetPlane : public Plane
{
	using Plane::Plane;
};

JetPlan plane("Boeing"); // OK

class PropPlane : public Plane
{
	public:
		using Plane::Plane;

		//overrides Plane constructor with the same parameters
		PropPlan(const string* manufacturer) : Plane(manufacturer)
		{
		cout << "In PropPlan()" << endl;
		}
};

PropPlan prop_plane("ATR");
//////////////////

Class Plane
{
	string _manufacturer;

	public:
		Plane(const string& manufacturer) : _manufacturer(manufacturer)
		{}
};

class Boat
{
	string _boat_manufacturer;

	public:
		Boat(const string& manufacturer) : _boat_manufacturer(manufacturer)
		{}
};

class FloatPlane : public Plane, Public Boat
{
	using Plane::Plane;
	using Boat::Boat;

FloatPlane(const string& manufacturer) : Plane(manufacturer), Boat("n/a")
{}
};
/////////////

Inheriting Constructors
class PropPlane : public Plane
{
	size_t _prop_count;

	public:
		using Plane::Plane;
};

	//oops, _prop_count is not initialized
	PropPlane prop_Plane("ATR");
//////////////

DELEGATING CONSTRUCTORS

class JetPlane
{
	vector<Engine> _engines;
	string _manufacturer;
	string _model;

public:
	JetPlane() : _engines(2), _manufacturer("Unknown"), _model("Unknown")
	{
	configure_engines();
	}

	JetPlane(const string& manufacturer, const string& mode1) :
	_engines(Lookup::engine_count(manufacturer, mode1)),
	_manufacturer(manufacturer), _mode1(mode1)
	{
	configure_engines();
	assign_tail_number();
	}
	//...
};
/////////////

class JetPlane
{
	vector<Engine> _engines;
	string _manufacturer;
	string _model;

public:
	JetPlane() : JetPlan(2, "Unknown", "Unknown")
	{}

	JetPlane(const string& manufacturer, const string& mode1) :
	JetPlan(Lookup::engine_count(manufacturer,mode1), manufacturer, mode1)
	{
	assign_tail_number();
	}

private:
	JetPlane(size_t engine_count, const string& manufacturer, const string& mode1) :
	_engines(engine_count), _manufacturer(manufacturer), _mode1(mode1)
	{
	configure_engines();
	}
//...

};
-------------------------

DEFAULT METHODS

class JetPlane
{
	public:
		JetPlan() = default;
		JetPlane(const(JetPlane& other);
		JetPlan(JetPlan&&) = default;
};

class JetPlane
{
	public:
		JetPlane() = default;

		virtua ~JetPlane() = default;

	protected:
		JetPlan(const JetPlan& other) default;
		JetPlane& operator = (const JetPlane&) = default;
};

--------------------------------

DELETED METHODS

class JetPlane
{
	public:
		JetPlane() = default;
		JetPlane(const JetPlane&) = delete;
		JetPlane& operator = (const JetPlane&) = delete;
		JetPlane(JetPlane&&) = default;
		JetPlane& operator = (JetPlane&&) = default;
};
	-allows you to disable some instantiations of a template

	template<typename t>
	void serialize(const T& obj)
	{
		cout << obj.to_string();
	};

	//PasswordStore not allowed to be serialized
	void serialize(const PasswordStore&) = delete;
		
	-allows you to disable unwanted conversion

	class Altimeter
	{
	public:
		Altimeter(double){}
		Altimeter(int) = delete;
	};
	
	-allows you to disable heap allocation

	class StackOnly
	{
	public:
		void* operator new(size_t) = delete;
	};

-------------------------------------

OVERRIDE AND FINAL

int override = 5; //ok
int final = 10; // ok

struct Base
{
	virtual void f(int)
	{}
};

struct Dervied: public Base
{
	virtual void f(int) override //ok
	{}

	virtual void f(double) override // error
	{}
};

/////

struct Base final
{};

struct Derived : public Base //compile error, can't inherit from final class
{};

struct Interface
{
	virtual void f()
	{}
};

struct Base : public Interface
{
	virtual void f() final
	{}
};

struct Derived : public Base
{
	virtual void f() // compile error, can't override a final method
	{}
};
--------------------------

EXTENDED FRIEND DECLARATIONS

class A;
class B;

class Friend
{
	friend class A; //old declarations are stll ok
	friend B; //you can also do this now
};

class Amigo
{
	friend class D; // OK: declares new class D
	friend D;    //error:undeclared class D
};

class B;
typedef B B2;

class Amigo
{
	friend B2; // OK
};

////////////////
Template parameters can be declared as friends.

template <typename T, typename U>
class Ami
{
	friend T; // OK
	friend class U; //still an error, can't use an elaborate specifier in a template.
};

Ami<string, string> rc; // OK
Ami<char, string> f; //OK, "friend char" has no effect in the template.

-----------------------

NESTED CLASS ACCESS RIGHTS

class JetPlane
{
	//...
	private:
		int _flap_angle;

		GPSNavigator{};

	class Autopilot
	{
		GPSNavigator _gps_navigator;	//OK, JetPlane::AUtopilot can access.
			     			//JetPlane::GPSNavigator
		void adjust_flaps(JetPlane& plane, int flap_angle)
		{
		plan._flap_angle = flap_angle; //OK, JetPlane::Autopilot can access JetPlane::_flap_angle
		}
	};
};

-------------------

THE DREAM OF UNIFORM INITIALIZATION

class Point
{
	public:
		int _x, _y;
		Point(int x, int y) : _x(x), _y(y)
		{}
};
Point p = {10, 20};
Point p(10, 20); //have to use this instead

int value[] = {1,2,3}; // ok
int* p_values = new int[3] {1,2,3}; // not going to happen

class Hexagon
{
	int _points[6];

	Hexagon() // no way to initialize _points in initialization list
	{}
};

/////

direct initialization - int x(10);
copy initialization - int y = 20;
brace initialization - int values[] = {1,2,3};

--------------------

EMBRACING BRACES

int x {5};
int* p_values = new int[3] {1,2,3};

class Point
{
	public:
		int _x, _y;
		Point(int x, int y) : _x(x), _y(y)
		{}
};
Point p1 {10, 20};
Point p = {10, 20};

class Hexagon
{
	int _points[6];

	Hexagon() : _points{1,2,3,4,5,6}
	{}
};

////////////

vector<int> v {1,2,3,4};

vector<int> extract_core_points(const vector<int>& v)
{
	return {v.front(), v[v.size() / 2], v.back()};
}

vector<int> core_points = extract_core_points({1,2,3,4,5});

///////////

initializer_list

#include <initializer_list>

Polygon(initializer_list<int> point_indexes)
{
	if(point_indexes.size() < 3)
	{
		throw Error("Polygons require 3 or more points");
	}
	for_each(point_indexes.begin(), point_indexes.end(),
					[=](int index) {_points.push_back(Lookup::point(index)); });
}

const int * p = point_indexes.begin();
cout << p[1] << endl;

vector<int> core_points;
core_points.insert(core_points.end(), {7,9,11});
------------------------------

NARROWING CONVERSIONS

int x[] = {1,2.5,3};
2.5 is reduced to 2

---------------------------

