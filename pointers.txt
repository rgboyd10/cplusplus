Pointers and References
-Pointers hold the address of something else
	 -One way to get one: & operator
int* pA = &A;
int *pA = &A;

To get through the pointe to its target: * operator

*pA = 5;

Shortcut for (*p). is p->

Developer needs to assign a value for "not pointing to anything"
-0
-NULL
-nullptr(c++11)

Reference is an alias for something else
	  -Can only set its target when declaring it
	  -All other actions go through the refernce to its target

SMART POINTERS
-shared_ptr
	-Reference counted
-weak_ptr
	-Lets you peek at a shared_ptr without bumping the reference count
-unique_ptr
	-Noncopyable (use std:move)

----------------------------------------

ComPtr - Com Interface Pointers
-don't use outside of windows
----

unique_ptr
-exclusively owns object to which it points
-can't be copied
-can be moved
-make_unique
-----

Summary
-unique_ptr - should be the first stop for pointers you use because it is efficient with flexible design modeling exclusive ownership.

-shared_ptr - is for shared ownership scenarios and while it adds a bit of overhead, it certainly solves some awkward coding problems and saves you from having to write a lot of bookkeeping code yourself.

-weak_ptr - solves the problem of circular references in various data structures in object models. Use it when you need to refer to an object managed by shared_ptr without taking a strong reference.

-if dealing with com interface, use ComtPtr and do not use the pointer above.
	-The Essentials of COM - Part 1 and 2
	-http://pluralsight.com/Courses/com-essentials


